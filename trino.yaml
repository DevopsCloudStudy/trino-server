---
# Source: trino/templates/configmap-catalog.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-trino-trino-catalog
  namespace: default
  labels:
    helm.sh/chart: trino-0.27.0
    app.kubernetes.io/name: trino
    app.kubernetes.io/instance: my-trino
    app.kubernetes.io/version: "454"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: catalogs
data:
  tpch.properties: |
    connector.name=tpch
    tpch.splits-per-node=4
  tpcds.properties: |
    connector.name=tpcds
    tpcds.splits-per-node=4
---
# Source: trino/templates/configmap-coordinator.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-trino-trino-coordinator
  namespace: default
  labels:
    helm.sh/chart: trino-0.27.0
    app.kubernetes.io/name: trino
    app.kubernetes.io/instance: my-trino
    app.kubernetes.io/version: "454"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: coordinator
data:
  node.properties: |
    node.environment=production
    node.data-dir=/data/trino
    plugin.dir=/usr/lib/trino/plugin

  jvm.config: |
    -server
    -agentpath:/usr/lib/trino/bin/libjvmkill.so
    -Xmx8G
    -XX:+UseG1GC
    -XX:G1HeapRegionSize=32M
    -XX:+ExplicitGCInvokesConcurrent
    -XX:+HeapDumpOnOutOfMemoryError
    -XX:+ExitOnOutOfMemoryError
    -XX:-OmitStackTraceInFastThrow
    -XX:ReservedCodeCacheSize=512M
    -XX:PerMethodRecompilationCutoff=10000
    -XX:PerBytecodeRecompilationCutoff=10000
    -Djdk.attach.allowAttachSelf=true
    -Djdk.nio.maxCachedBufferSize=2000000
    # Allow loading dynamic agent used by JOL
    -XX:+EnableDynamicAgentLoading
  
    # https://bugs.openjdk.org/browse/JDK-8329528
    -XX:+UnlockDiagnosticVMOptions
    -XX:G1NumCollectionsKeepPinned=10000000

  config.properties: |
    coordinator=true
    node-scheduler.include-coordinator=false
    http-server.http.port=8080
    query.max-memory=4GB
    query.max-memory-per-node=1GB
    discovery.uri=http://localhost:8080

  exchange-manager.properties: |
    exchange-manager.name=filesystem
  
    exchange.base-directories=/tmp/trino-local-file-system-exchange-manager

  log.properties: |
    io.trino=INFO
---
# Source: trino/templates/configmap-coordinator.yaml
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-trino-trino-schemas-volume-coordinator
  namespace: default
  labels:
    helm.sh/chart: trino-0.27.0
    app.kubernetes.io/name: trino
    app.kubernetes.io/instance: my-trino
    app.kubernetes.io/version: "454"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: coordinator
data:
---
# Source: trino/templates/configmap-worker.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-trino-trino-worker
  namespace: default
  labels:
    helm.sh/chart: trino-0.27.0
    app.kubernetes.io/name: trino
    app.kubernetes.io/instance: my-trino
    app.kubernetes.io/version: "454"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: worker
data:
  node.properties: |
    node.environment=production
    node.data-dir=/data/trino
    plugin.dir=/usr/lib/trino/plugin

  jvm.config: |
    -server
    -agentpath:/usr/lib/trino/bin/libjvmkill.so
    -Xmx8G
    -XX:+UseG1GC
    -XX:G1HeapRegionSize=32M
    -XX:+ExplicitGCInvokesConcurrent
    -XX:+HeapDumpOnOutOfMemoryError
    -XX:+ExitOnOutOfMemoryError
    -XX:-OmitStackTraceInFastThrow
    -XX:ReservedCodeCacheSize=512M
    -XX:PerMethodRecompilationCutoff=10000
    -XX:PerBytecodeRecompilationCutoff=10000
    -Djdk.attach.allowAttachSelf=true
    -Djdk.nio.maxCachedBufferSize=2000000
    # Allow loading dynamic agent used by JOL
    -XX:+EnableDynamicAgentLoading
  
    # https://bugs.openjdk.org/browse/JDK-8329528
    -XX:+UnlockDiagnosticVMOptions
    -XX:G1NumCollectionsKeepPinned=10000000

  config.properties: |
    coordinator=false
    http-server.http.port=8080
    query.max-memory=4GB
    query.max-memory-per-node=1GB
    discovery.uri=http://my-trino-trino:8080

  exchange-manager.properties: |
    exchange-manager.name=filesystem
  
    exchange.base-directories=/tmp/trino-local-file-system-exchange-manager

  log.properties: |
    io.trino=INFO
---
# Source: trino/templates/configmap-worker.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-trino-trino-schemas-volume-worker
  namespace: default
  labels:
    helm.sh/chart: trino-0.27.0
    app.kubernetes.io/name: trino
    app.kubernetes.io/instance: my-trino
    app.kubernetes.io/version: "454"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: worker
data:
---
# Source: trino/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-trino-trino
  namespace: default
  labels:
    helm.sh/chart: trino-0.27.0
    app.kubernetes.io/name: trino
    app.kubernetes.io/instance: my-trino
    app.kubernetes.io/version: "454"
    app.kubernetes.io/managed-by: Helm
  annotations:
    {}
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: trino
    app.kubernetes.io/instance: my-trino
    app.kubernetes.io/component: coordinator
---
# Source: trino/templates/deployment-coordinator.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-trino-trino-coordinator
  namespace: default
  labels:
    helm.sh/chart: trino-0.27.0
    app.kubernetes.io/name: trino
    app.kubernetes.io/instance: my-trino
    app.kubernetes.io/version: "454"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: coordinator
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: trino
      app.kubernetes.io/instance: my-trino
      app.kubernetes.io/component: coordinator
  template:
    metadata:
      annotations:
        checksum/catalog-config: a60b5b4e8a42fe1a46fa96f9cdeb4f96c7ed7830de133a7176df780b14c088a2
        checksum/coordinator-config: d4baafb8cb74f0029eb63438f4b502a1d5c24f3926d8eda244cb11eb52422903

      labels:
        helm.sh/chart: trino-0.27.0
        app.kubernetes.io/name: trino
        app.kubernetes.io/instance: my-trino
        app.kubernetes.io/version: "454"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: coordinator
    spec:
      serviceAccountName: default
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
      volumes:
        - name: config-volume
          configMap:
            name: my-trino-trino-coordinator
        - name: catalog-volume
          configMap:
            name: my-trino-trino-catalog
        - name: schemas-volume
          configMap:
            name: my-trino-trino-schemas-volume-coordinator
      imagePullSecrets:
        - name: registry-credentials
      terminationGracePeriodSeconds: 30
      containers:
        - name: trino-coordinator
          image: trinodb/trino:454
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
          env:
            []
          envFrom:
            []
          volumeMounts:
            - mountPath: /etc/trino
              name: config-volume
            - mountPath: /etc/trino/catalog
              name: catalog-volume
            - mountPath: /etc/trino/schemas
              name: schemas-volume
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /v1/info
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 6
            successThreshold: 1
          readinessProbe:
            exec:
              command: [/usr/lib/trino/bin/health-check]
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 6
            successThreshold: 1
          lifecycle:
            {}
          resources:
            {}
---
# Source: trino/templates/deployment-worker.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-trino-trino-worker
  namespace: default
  labels:
    helm.sh/chart: trino-0.27.0
    app.kubernetes.io/name: trino
    app.kubernetes.io/instance: my-trino
    app.kubernetes.io/version: "454"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: worker
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: trino
      app.kubernetes.io/instance: my-trino
      app.kubernetes.io/component: worker
  template:
    metadata:
      annotations:
        checksum/worker-config: 09a0badc6077a0b18d7e32fe6536a0c5eabe8bdb013b4a19a538990c7ce66d5a
      labels:
        helm.sh/chart: trino-0.27.0
        app.kubernetes.io/name: trino
        app.kubernetes.io/instance: my-trino
        app.kubernetes.io/version: "454"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: worker
    spec:
      serviceAccountName: default
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
      volumes:
        - name: config-volume
          configMap:
            name: my-trino-trino-worker
        - name: catalog-volume
          configMap:
            name: my-trino-trino-catalog
        - name: schemas-volume
          configMap:
            name: my-trino-trino-schemas-volume-worker
      imagePullSecrets:
        - name: registry-credentials
      terminationGracePeriodSeconds: 30
      containers:
        - name: trino-worker
          image: trinodb/trino:454
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
          env:
            []
          envFrom:
            []
          volumeMounts:
            - mountPath: /etc/trino
              name: config-volume
            - mountPath: /etc/trino/catalog
              name: catalog-volume
            - mountPath: /etc/trino/schemas
              name: schemas-volume
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /v1/info
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 6
            successThreshold: 1
          readinessProbe:
            exec:
              command: [/usr/lib/trino/bin/health-check]
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 6
            successThreshold: 1
          lifecycle:
            {}
          resources:
            {}
---
apiVersion: v1
items:
- apiVersion: v1
  data:
    release: 
  kind: Secret
  metadata:
    creationTimestamp: "2024-08-27T07:31:37Z"
    labels:
      modifiedAt: "1724743897"
      name: my-trino
      owner: helm
      status: deployed
      version: "1"
    name: sh.helm.release.v1.my-trino.v1
    namespace: default
    resourceVersion: "81627"
    uid: f74a719b-43c8-4cd9-9607-cb9c921e6733
  type: helm.sh/release.v1
kind: List
metadata:
  resourceVersion: ""
